
# Release build for -netonly package should be triggered after the normal release build
trigger: none
pr: none

variables:
  BuildPlatform: 'AnyCPU'
  BuildConfiguration: 'Release'
  ProjectFilePath: '$(Build.SourcesDirectory)\src\client\Microsoft.Identity.Client\Microsoft.Identity.Client.csproj'
  ProjectFolderPath: '$(Build.SourcesDirectory)\src\client\Microsoft.Identity.Client'

stages:
- stage: MsalNetOnly
  jobs:

  - job: 'BuildPackSign'
    pool:
      vmImage: 'windows-2022'
      demands:
      - msbuild
      - visualstudio

    steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use latest NuGet'
      inputs:
        versionSpec: 6.x

    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 6.x'
      inputs:
        version: 6.x

    - task: CmdLine@2
      displayName: 'Clear local NuGet cache'
      inputs:
        script: 'nuget locals all -clear'

    - template: template-prebuild-code-analysis.yaml
    
    - task: VSBuild@1
      displayName: 'Restore $(ProjectFilePath)'
      inputs:
        solution: $(ProjectFilePath)
        msbuildArgs: '/t:restore /p:NET_ONLY_INTERNAL_PACKAGE=true'
        platform: ${{ variables.BuildPlatform }}
        configuration: ${{ variables.BuildConfiguration }}
        
    - task: VSBuild@1
      displayName: 'Build $(ProjectFilePath)'
      inputs:
        solution: $(ProjectFilePath)
        msbuildArgs: '/p:RunCodeAnalysis=false /p:MsalClientSemVer=$(MsalClientSemVer) /p:SourceLinkCreate=true /p:ContinousIntegrationBuild=true /p:NET_ONLY_INTERNAL_PACKAGE=true'
        platform: ${{ variables.BuildPlatform }}
        configuration: ${{ variables.BuildConfiguration }}
        maximumCpuCount: true

    - template: template-sign-binary.yaml
      parameters:
        FolderPath: '${{ variables.ProjectFolderPath }}'
        Pattern: '**\bin\**\Microsoft.Identity.Client.dll'

    - task: VSBuild@1
      displayName: 'Pack ${{ variables.ProjectFilePath }}'
      inputs:
        solution: ${{ variables.ProjectFilePath }}
        msbuildArgs: '/t:pack /p:nobuild=true /p:IncludeSymbols=true /p:NET_ONLY_INTERNAL_PACKAGE=true'
        configuration: ${{ variables.BuildConfiguration }}

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)\packages'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\'
        Contents: '**\*nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\packages'
        flattenFolders: true

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Sign Packages'
      inputs:
        ConnectedServiceName: 'IDDP Code Signing'
        FolderPath: '$(Build.ArtifactStagingDirectory)\packages'
        Pattern: '*nupkg'
        signConfigType: inlineSignParams
        inlineOperation: |
         [
             {
                 "keyCode": "CP-401405",
                 "operationSetCode": "NuGetSign",
                 "parameters": [ ],
                 "toolName": "sign",
                 "toolVersion": "1.0"
             },
             {
                 "keyCode": "CP-401405",
                 "operationSetCode": "NuGetVerify",
                 "parameters": [ ],
                 "toolName": "sign",
                 "toolVersion": "1.0"
             }
         ]
        SessionTimeout: 20
        VerboseLogin: true
      timeoutInMinutes: 5

    - task: CmdLine@2
      displayName: 'Verify packages are signed'
      inputs:
        script: 'dotnet nuget verify $(Build.ArtifactStagingDirectory)\packages\*.nupkg'

    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Get Software Bill Of Materials (SBOM)'
      inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)\packages'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: packages'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)\packages'
        artifactName: packages

    - template: template-publish-analysis-and-cleanup.yaml
